// SPDX-License-Identifier: GPL-3.0
pragma solidity >0.4.0;

contract NRG {

    address private administrator;
    function NRG_Grid_admin() public 
    {
         administrator = msg.sender;
    }

    struct User
        {
            string name;
            string useraddr;
            int256 Power_Gen;               //Power generated by client
            uint256 Power_Gen_total;        //Total power generated by client
            uint256 Power_Consumed;         //Power consumed by client
            uint256 Power_Consumed_total;   //Total power consumed by client
            bool Gen_Permission;            //Power generation permission
            bool Con_Permission;            //Power consumption permission
            string information;             //Electricity dispatch information
        }
    mapping (address=>User) user;
    
    function authorization(address addr, string memory _name,string memory _useraddr,bool _Gen_Permission,bool _Con_Permission) public 
    {
        require(msg.sender==administrator);
        user[addr].name=_name;
        user[addr].useraddr=_useraddr;
        user[addr].Power_Gen=0;
        user[addr].Power_Gen_total=0;
        user[addr].Power_Consumed=0;
        user[addr].Power_Consumed_total=0;
        user[addr].Gen_Permission=_Gen_Permission;
        user[addr].Con_Permission=_Con_Permission;
        user[addr].information="";
    }

    function calPrice(uint256 power,uint256 volume) pure public returns (uint c){
        c = power * volume;
    }

    function extraPower(uint256 _value) public 
    {
        if(!user[msg.sender].Gen_Permission)
            return;
        user[msg.sender].Power_Gen+=(int256)(_value);
        user[msg.sender].Power_Gen_total+=_value;
    }

    function transfer(address _to,uint256 _value) public 
    {
        require(user[msg.sender].Gen_Permission);
        require(user[_to].Con_Permission);
        require(user[_to].Power_Consumed+_value>user[_to].Power_Consumed);
        user[msg.sender].Power_Gen-=(int256)(_value);
        user[_to].Power_Consumed+=_value; 
    }

    function powerConsume(uint256 _value) public 
    {
        require(user[msg.sender].Con_Permission);
        require(user[msg.sender].Power_Consumed>=_value);
        user[msg.sender].Power_Consumed-=_value;
        user[msg.sender].Power_Consumed_total+=_value;
    }

    function powerDispatch(address addr,string memory _info)public {
        require(msg.sender==administrator);
        user[addr].information=_info;
    }

    function userEnquire()  public view  returns( uint256 _value)
    {
        return (user[msg.sender].Power_Consumed);
    }

    function adminEnquire( address addr) public view returns(uint256 _value)
    {
        if(msg.sender==addr||msg.sender==administrator)
            return (user[addr].Power_Consumed_total);
    }

    function powerTarget() public view returns(int256 _value)
    {    
        return (user[msg.sender].Power_Gen);
    }
    function powerGenTotal(address addr) public view returns(uint256 _value)
    {
        if(msg.sender==addr||msg.sender==administrator)
            return (user[addr].Power_Gen_total);
    }

    function fetchInfomation() public view returns(string memory _info)
    {
        return (user[msg.sender].information); 
    }

}